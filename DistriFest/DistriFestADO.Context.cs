//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DistriFest
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using DistriFest.DataHandling;

    public partial class DistriFestEntities : DbContext
    {
        public DistriFestEntities()
            : base("name=DistriFestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<LoginByUsernamePassword_Result> LoginByUsernamePassword(string username, string password)
        {


            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));

            var passwordParameter = "invalid" != null ?
                new ObjectParameter("password", "invalid") :
                new ObjectParameter("password", typeof(string));

            Tuple<string,bool> checktuple = PasswordHandling.ValidatePassword(password, username);

            if(checktuple.Item2)
            {
                passwordParameter = checktuple.Item1 != null ?
                new ObjectParameter("password", checktuple.Item1) :
                new ObjectParameter("password", typeof(string));

            }
            else
            {
                passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
            }

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginByUsernamePassword_Result>("LoginByUsernamePassword", usernameParameter, passwordParameter);


        }
    }
}
